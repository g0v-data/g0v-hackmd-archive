{"huG2aKq5RpGfQCupNxvNAw":{"content":"## SRAMs\n- 每位元使用六到八個晶體來讀取\n## DRAM\n- 以電荷的形式存在電容中(電容要大)\n- DRAM 一定在cpu 外面\n- 加快速度用\n- 在每個周期要 重新 存電荷 (ms)\n- 因為電荷會漏電 所以為動態\n- 比sram 慢\n-  在讀取前 必須做刷新\n![](https://g0vhackmd.blob.core.windows.net/g0v-hackmd-images/upload_0664057ce8b3bcb1031db77ccc1d15ad)\n## SDRAMs\n- 同步\n- 有個緩衝器 使 dram 如 sram 一樣快\n- 輸出大量位元(burst)\n    - 先送一筆 address\n    - 可以 接著讀下去\n    ![](https://g0vhackmd.blob.core.windows.net/g0v-hackmd-im...","tags":[["## 區域性",""],["- 時間區域性(temporal locality)","若被存取 下次可能很快的被存取"],["- 空間區域性(spatial locality)","附近的資料有即將被存取的傾向"],["---",""],["## 記憶體階層(memory hierarchy)",""],["",""],["![](https","//g0vhackmd.blob.core.windows.net/g0v-hackmd-images/upload_ccb090df79d30f7d24e2bb547b2c61b4)"],["- 最快的 最貴 最貴的最小 最小的 最靠近 cpu",""],["- 資訊最小的單位稱為一個 區塊(block)",""],["- 資料只在兩層間複製",""],["",""],["## 5-1",""],["- 命中(hit)","找到我要的東西"],["- 錯失(miss)",""],["- 命中時間(hit time)","找到後要花多久時間把他讀出來"],["- 錯失懲罰(miss penalty)","要花多少代價把下一層的東西搬上來"]]}}