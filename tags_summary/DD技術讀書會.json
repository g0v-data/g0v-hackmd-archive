{"kf0QwrKZSbmtTxdDZZMHKA":{"content":"\n+ **命令模式涉及到五個角色，他們分別是：**：\n* 客戶端角色(Client)：創建一個具體命令ConcreteCommand對象並確定其接收者。\n* 請求者角色(Invoker)：負責調用命令對象執行請求，相關的方法叫做行動方法。\n* 命令角色(Command)： 聲明一個給所有具體命令類的抽象接口。\n* 具體命令角色(ConcreteCommand)：定義一個接收者和行為之間的弱耦合；實現execute()方法，負責調用接收者的相應操作。execute()方法通常叫做執行方法。\n* 接收者角色(Receiver)：負責具體實施和執行一個請求。任何一個類都可以成為接收者，實施和執行請求的方法...","tags":[["-",""]]},"u69YNfMzSUCiosmXYQvtEA":{"content":"## 導讀\n\n### + 組合模式：\n:::info\n【 組合模式 】\n將物件組織成樹狀結構、『部分』與『整體』的層次結構。\n組合模式使得用戶對『單個物件』和『組合物件』的使用具有一致性。\n:::\n\n+ **時機**：\n  * 希望用戶可以忽略『單個物件』和『組合物件』的不同，使用一致的方式對待所有物件時。\n+ **結構圖**：\n![](https://g0vhackmd.blob.core.windows.net/g0v-hackmd-images/upload_d56e21734a40c6ae2fc67a34b9d83fa0)\n\n\n\n\n### + 範例：\n+ **公司與部門的結構圖**：\n  * ![](https://g0vhackmd.blob.core.windows.net/g0v-hackmd-images/u...","tags":[["-",""]]},"Mra7q7DdT6-InxySelB_2g":{"content":"## 導讀\n\n<br>\n\n### 情境問題\n``` \n如何解決小吃攤販廚師不同，料理品質不同？\n=> 大型連鎖速食店有制式的生產流程\n```\n\n<br><br><br><br><br><br>\n\n\n* 回顧依賴倒轉\n\n原本的好吃的品質取決於廚師\n```mermaid\ngraph LR\n    A[小菜]\n    B[大鳥]\n    C[廚師]\n    D[炒飯]\n    A-->C\n    B-->C\n    C-->D\n```\n抽出了制式流程之後依賴就倒轉了\n```mermaid\ngraph LR\n    A[小菜]\n    B[大鳥]\n    C[廚師]\n    D[炒飯]\n    E[制式流程]\n    A-->E\n    B-->E\n    C-->E\n    E-->D\n``` \n    \n    \n<br><br><br><br><br><br>\n    \n\n### 衍生問...","tags":[["-",""]]},"VQajKK63SMW-JSVd4meCWA":{"content":"## 導讀\n\n### + 範本方法模式：\n:::info\n【 範本方法模式 】\n定義一個操作中的演算法的骨架，而將一些步驟延遲到子類別中。\n範本方法使得子類別可以不改變一個演算法的結構，即可重新定義該演算法的某些特定步驟。\n:::\n\n+ **時機**：\n  * 當我們要完成一個系列的步驟，或某一細節層次一致的過程，但其個別步驟在更詳細的層次上實現可能不同時。\n+ **模式特點**：\n  * 透過把不變的行為搬移到超類別，去除子類別中重複的程式碼。\n___\n\n### + 範例：考試卷\n\n* Bad:\n![](https://g0vhackmd.blob.core.windows.net/g0v-hackmd-images/uploa...","tags":[["-",""]]},"BerwHGn1ToO9jHG8FDkLrw":{"content":"tags: DD技術讀書會\n--- \n>\n> # Title   \n> \n>\n> [name=Kelly] [time=WW, MM DD, 2019] [color=#907bf7]\n> ","tags":[["-",""]]},"YBDTIz8kTkGf3la3kgnltw":{"content":"## 導讀\n\n","tags":[["-",""]]},"dJJkbGtpTNmtSiZCFWp5Ag":{"content":"> DD技術讀書會 \n>\n> # DiskCacheStrategy of Glide  \n>\n> Glide is a fast and efficient open source media management and image loading framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.\n>\n> [name=Kelly] [time=Fri, Mar 29, 2019] [color=#907bf7]\n\n這次要從 Glide 的硬體快取決策去看決策模式的應用。\n\n下面是抽象類別 DiskCacheStrategy 的介面 \n跟他提供了五種不同的決策 (為了方便閱讀我把實作細節都拿掉了)\n\n- ALL : 全部圖像...","tags":[["-",""]]},"q7XpYSXxTEy8Wuf0cX2g3w":{"content":"## 導讀\n","tags":[["-",""]]},"N1FIpaUUSUG6CIHRBDLZNA":{"content":"**6. Dependency Inversion Principle 依賴反轉原則**\n＊把細節用注入的方式，去確保相依的流程是單向性\n觀察程式碼相依流程會形成反向\n=>DIP: 避免高階程式因為低階程式改變而被迫改變\n\n\n範例討論 哪裡違反原則了？\n* Bad:\n```php=\nclass Employee\n{\n    public function work(): void\n    {\n        // ....working\n    }\n}\n\nclass Robot extends Employee\n{\n    public function work(): void\n    {\n        //.... working much more\n    }\n}\n\nclass Manager\n{\n    private $employee;\n\n    public function __construct(Employee ...","tags":[["-",""]]}}